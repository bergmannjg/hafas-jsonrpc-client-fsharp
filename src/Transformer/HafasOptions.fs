module HafasOptions

//
// Hafas domain specfic transformations
//

let prelude = """/// generated by ts2fable and transformer
module rec Hafas

open System

// type Promise<'T> = Async<'T>
type Promise<'T> =
    abstract _catch: onrejected:option<obj -> 'T> -> Promise<'T>
    abstract _then: onfulfilled:option<'T -> 'TResult> * onrejected:option<obj -> 'TResult> -> Promise<'TResult>

type U2<'a, 'b> =
    | Case1 of 'a
    | Case2 of 'b

type U3<'a, 'b, 'c> =
    | Case1 of 'a
    | Case2 of 'b
    | Case3 of 'c

type U2StopLocation =
    | Stop of Stop
    | Location of Location
    | Empty

type U2StationStop =
    | Station of Station
    | Stop of Stop
    | Empty

type U3StationStopLocation =
    | Station of Station
    | Stop of Stop
    | Location of Location
    | Empty

type U2HintWarning =
    | Hint of Hint
    | Status of Hint
    | Warning of Warning
    | Empty
"""

let postlude = """/// Defaults

let defaultLocationsOptions: LocationsOptions =
    { fuzzy = Some true
      results = Some 5
      stops = Some true
      addresses = Some true
      poi = Some true
      subStops = Some true
      entrances = Some true
      linesOfStops = Some false
      language = Some "en" }

let defaultJourneysOptions: JourneysOptions =
    { departure = Some System.DateTime.Now
      arrival = None
      earlierThan = None
      laterThan = None
      results = Some 3
      via = None
      stopovers = Some true
      transfers = Some -1
      transferTime = Some 0
      accessibility = Some "none"
      bike = Some false
      products = None
      tickets = Some false
      polylines = Some false
      subStops = Some true
      entrances = Some true
      remarks = Some true
      walkingSpeed = Some "normal"
      startWithWalking = Some true
      language = Some "en"
      scheduledDays = Some false
      ``when`` = None }

let defaultLocation: Location =
    { ``type`` = Some "location"
      id = None
      name = None
      poi = None
      address = None
      longitude = None
      latitude = None
      altitude = None
      distance = None }

let defaultStop: Stop =
    { ``type`` = Some "stop"
      id = None
      name = None
      location = None
      station = None
      products = None
      lines = None
      isMeta = None
      reisezentrumOpeningHours = None
      ids = None
      loadFactor = None
      entrances = None
      transitAuthority = None
      distance = None }

let defaultStation: Station =
    { ``type`` = Some "station"
      id = None
      name = None
      station = None
      location = None
      products = None
      isMeta = None
      regions = None
      lines = None
      facilities = None
      reisezentrumOpeningHours = None
      stops = None
      entrances = None
      transitAuthority = None
      distance = None }

let defaultLeg: Leg =
    { tripId = None
      origin = U2StationStop.Empty
      destination = U2StationStop.Empty
      departure = None
      plannedDeparture = None
      prognosedArrival = None
      departureDelay = None
      departurePlatform = None
      prognosedDeparturePlatform = None
      plannedDeparturePlatform = None
      arrival = None
      plannedArrival = None
      prognosedDeparture = None
      arrivalDelay = None
      arrivalPlatform = None
      prognosedArrivalPlatform = None
      plannedArrivalPlatform = None
      stopovers = None
      schedule = None
      price = None
      operator = None
      direction = None
      line = None
      reachable = None
      cancelled = None
      walking = None
      loadFactor = None
      distance = None
      ``public`` = None
      transfer = None
      cycle = None
      alternatives = None
      polyline = None
      remarks = None }

let defaultJourneys: Journeys =
    { earlierRef = None
      laterRef = None
      journeys = None
      realtimeDataFrom = None }
"""

let transformType str =
    if str = "ReadonlyArray" then "array"
    else if str = "ResizeArray" then "array"
    else if str = "U3<Station,Stop,Location>" then "U3StationStopLocation"
    else if str = "U2<Stop,Location>" then "U2StopLocation"
    else if str = "U2<Station,Stop>" then "U2StationStop"
    else if str = "U3<Station,Stop,obj>" then "U2StationStop"
    else if str = "U2<bool,obj>" then "Products"
    else if str = "U2<Hint,Warning>" then "U2HintWarning"
    else if str = "U2<string,float>" then "string"
    else str

let escapeIdent str =
    if str = "type" then "``" + str + "``"
    else if str = "default" then "``" + str + "``"
    else if str = "when" then "``" + str + "``"
    else if str = "public" then "``" + str + "``"
    else if str = "to" then "``" + str + "``"
    else str

let excludeTypes = [| "ReadonlyArray"; "IExports" |]

let transformTypeVals =
    [| "transferTime", "int option"
       "transfers", "int option"
       "delay", "int option"
       "departureDelay", "int option"
       "arrivalDelay", "int option"
       "transfers", "int option"
       "transfers", "int option"
       "results", "int option"
       "bitmasks", "array<int>"
       "``type``", "string option" |]

let transformTypeDefns =
    [| "ScheduledDays", "Map<string, bool>"
       "Products", "Map<string, bool>"
       "Facilities", "Map<string, string>"
       "Ids", "Map<string, string>" |]

let transformsType (name: string) (arr: (string * string) array) =
    let index =
        Array.tryFindIndex (fun (s, _) -> s = name) arr

    if (index.IsSome) then
        let (_, transform) = arr.[index.Value]
        Some transform
    else
        None

let transformsTypeVal (name: string) = transformsType name transformTypeVals

let transformsTypeDefn (name: string) = transformsType name transformTypeDefns

let excludesType (name: string) =
    Array.exists (fun s -> s = name) excludeTypes

let options: Transformer.TransformerOptions =
    { prelude = Some prelude
      postlude = Some postlude
      escapeIdent = escapeIdent
      transformType = transformType
      excludesType = excludesType
      transformsTypeVal = transformsTypeVal
      transformsTypeDefn = transformsTypeDefn }
